---
import RvLogoIcon from '@/icons/RvLogoIcon.astro';
import HamburgerIcon from '@/icons/HamburgerIcon.astro';
import CloseIcon from '@/icons/CloseIcon.astro';
import NavigationItems from './NavigationItems.astro';
import type { NavItem } from './navItems';
import { hashTags } from '@/constants';
import { classes } from '@/utils';

interface Props {
  navItems?: NavItem[];
}

const { navItems } = Astro.props;
---

<style lang="scss">
  // prevent scrolling when side navigation is open
  :global(html:has(#side-navigation-open:checked) body) {
    overflow: hidden;
  }

  header {
    &.box-shadow {
      @apply shadow-lg;
      @apply shadow-backgroundDark;
    }

    &.show-header {
      @apply translate-y-0;
    }
  }
</style>

<header
  id={hashTags.header}
  class={classes(`
    py-8 px-10 w-full fixed -translate-y-full
    flex items-center justify-between
    bg-background
    transition-[transform,box-shadow] duration-300 ease-in-out
    z-appBar
    show-header
  `)}
>
  <a href="/" aria-label="Logo" class="text-accent inline-block">
    <RvLogoIcon width="2.5rem" height="2.5rem" style={{ fontSize: 0 }} />
  </a>
  {/* Horizontal navigation */}
  <NavigationItems class="hidden gap-6 lg:flex" navItems={navItems} />
  <button
    type="button"
    class={classes(`flex justify-center items-center lg:hidden`)}
    id="hamburger-menu"
    title="open navigation menu"
  >
    <HamburgerIcon width="35" role="img" aria-hidden />
  </button>
  {/* State to keep track of whether the menu is open or not */}
  <input type="checkbox" class="peer hidden" id="side-navigation-open" />
  {/* Vertical navigation */}
  <NavigationItems
    class={classes(`
    fixed hidden w-[100dvw] h-[100dvh] left-0 top-0
    flex-col justify-center items-center gap-12
    bg-background z-drawer
    peer-checked:flex
    lg:peer-checked:hidden
  `)}
    id="vertical-nav"
    navItems={navItems}
  >
    <button
      type="button"
      slot="start-item"
      class={classes(`
        p-0
        flex
        bg-[transparent] border-0 text-text
        cursor-pointer
        [&:is(:focus-visible,:hover)]:text-accent
        lg:hidden
      `)}
      id="close-menu"
      title="close navigation menu"
    >
      <CloseIcon width="25" role="img" aria-hidden />
    </button>
  </NavigationItems>
</header>

<script>
  import { debounce } from '@vighnesh153/utils';

  const checkbox = document.querySelector('#side-navigation-open');
  const header = document.querySelector('#header');
  const hamburgerButton = document.querySelector('#hamburger-menu');
  const closeMenuButton = document.querySelector('#close-menu');
  const verticalNav = document.querySelector('#vertical-nav');

  const boxShadowScrollYOffset = 70;
  const showHeaderOffset = 200;
  let previousScrollY = 0;

  window.addEventListener(
    'scroll',
    debounce(() => {
      const currentScrollY = window.scrollY;
      header?.classList.toggle('box-shadow', currentScrollY >= boxShadowScrollYOffset);
      header?.classList.toggle('show-header', currentScrollY <= showHeaderOffset || currentScrollY < previousScrollY);
      previousScrollY = currentScrollY;
    }, 16)
  );

  // this is needed for when header is not visible but it gets focus
  header?.addEventListener('focusin', () => {
    header?.classList.toggle('show-header', true);
  });

  // @ts-ignore
  const toggleCheckbox = (value) => {
    if (checkbox) {
      // @ts-ignore
      checkbox.checked = value === undefined ? !checkbox.checked : value;
    }
  };

  const closeMenu = (transferFocusToHamburger = true) => {
    toggleCheckbox(false);
    if (transferFocusToHamburger) {
      // @ts-ignore
      hamburgerButton?.focus();
    }
  };

  hamburgerButton?.addEventListener('click', () => {
    toggleCheckbox(true);
    // @ts-ignore
    closeMenuButton?.focus();
  });

  closeMenuButton?.addEventListener('click', () => {
    closeMenu();
  });

  // @ts-ignore
  const getVerticalNavFocusableItems = () => Array.from(verticalNav.querySelectorAll('a, button'));

  verticalNav?.addEventListener('click', (e) => {
    // @ts-ignore
    const clickedElement = e.target.closest('a, button');
    const currentPathName = window.location.pathname;
    const navigationPathName = new URL(clickedElement.href).pathname;

    if (clickedElement.tagName === 'A' && currentPathName === navigationPathName) {
      closeMenu(false);
    }
  });

  verticalNav?.addEventListener('keydown', (e) => {
    const focusableItems = getVerticalNavFocusableItems();
    const firstItem = focusableItems[0];
    const lastItem = focusableItems[focusableItems.length - 1];

    // @ts-ignore
    const isShiftTabPressed = e.shiftKey && e.key === 'Tab';
    // @ts-ignore
    const isOnlyTabPressed = !e.shiftKey && e.key === 'Tab';
    // @ts-ignore
    const isEscapeKeyPressed = e.key === 'Escape';
    // @ts-ignore
    const isEnterKeyPressed = e.key === 'Enter';

    if (isEscapeKeyPressed) {
      e.preventDefault();
      closeMenu();
      return;
    }

    if (e.target !== closeMenuButton && isEnterKeyPressed) {
      // TODO: don't close menu if a.href is same as current path but only hash is different
      closeMenu(false);
      return;
    }

    if (isOnlyTabPressed) {
      for (let i = 0; i < focusableItems.length; i++) {
        const currentItem = focusableItems[i];
        if (e.target !== currentItem) continue;

        e.preventDefault();
        const loopAroundItems = [...focusableItems, firstItem];
        const nextFocusableItem = loopAroundItems[i + 1];
        // @ts-ignore
        nextFocusableItem.focus();

        return;
      }
    }

    if (isShiftTabPressed) {
      for (let i = 0; i < focusableItems.length; i++) {
        const currentItem = focusableItems[i];
        if (e.target !== currentItem) continue;

        e.preventDefault();

        const loopAroundItems = [lastItem, ...focusableItems];
        const previousFocusableItem = loopAroundItems[i];
        // @ts-ignore
        previousFocusableItem.focus();

        return;
      }
    }
  });
</script>
